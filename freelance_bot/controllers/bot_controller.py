from telebot import TeleBot, types
from views.telegram_view import TelegramView
from models.service import Service
from models.order import Order
import traceback

class BotController:
    def __init__(self, token):
        self.bot = TeleBot(token)
        self.view = TelegramView(self.bot)
        self.services = self._init_services()
        self.user_state = {}
        self._register_handlers()

    def _init_services(self):
        return [
            Service("design", "–î–∏–∑–∞–π–Ω", 3000, "–õ–æ–≥–æ—Ç–∏–ø—ã, –±–∞–Ω–Ω–µ—Ä—ã", {"simple": 1.0, "medium": 1.5}),
            Service("programming", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", 5000, "–°–∞–π—Ç—ã, –±–æ—Ç—ã", {"simple": 1.0, "hard": 2.0})
        ]

    def _register_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.view.show_main_menu(message.chat.id)

        @self.bot.message_handler(func=lambda msg: msg.text == "üìã –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥")
        def show_services(message):
            try:
                self.view.show_services(message.chat.id, self.services)
            except Exception as e:
                self._handle_error(message.chat.id, "show_services", e)

        @self.bot.message_handler(func=lambda msg: msg.text == "üìÇ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
        def show_portfolio(message):
            try:
                examples = [
                    "‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–∞—Ñ–µ (–ø—Ä–∏–º–µ—Ä: example.com/logo1)",
                    "‚Ä¢ –î–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞ (–ø—Ä–∏–º–µ—Ä: example.com/site1)"
                ]
                self.view.show_portfolio(message.chat.id, examples)
            except Exception as e:
                self._handle_error(message.chat.id, "show_portfolio", e)

        @self.bot.message_handler(func=lambda msg: msg.text == "‚ùì FAQ")
        def show_faq(message):
            try:
                faq_items = [
                    "1. –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å? - –ß–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥",
                    "2. –¶–µ–Ω—ã? - –û—Ç 3000 —Ä—É–±. –∑–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏"
                ]
                self.view.show_faq(message.chat.id, faq_items)
            except Exception as e:
                self._handle_error(message.chat.id, "show_faq", e)

        @self.bot.message_handler(func=lambda msg: msg.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        def show_referral(message):
            try:
                ref_link = f"https://t.me/{self.bot.get_me().username}?start=ref_{message.chat.id}"
                self.view.show_referral(message.chat.id, ref_link)
            except Exception as e:
                self._handle_error(message.chat.id, "show_referral", e)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith(("service_", "complexity_", "urgency_")))
        def handle_callback(call):
            try:
                if call.data.startswith("service_"):
                    self._handle_service_selection(call)
                elif call.data.startswith("complexity_"):
                    self._handle_complexity(call)
                elif call.data.startswith("urgency_"):
                    self._handle_urgency(call)
            except Exception as e:
                self._handle_error(call.message.chat.id, "callback", e)

    def _handle_service_selection(self, call):
        service_id = call.data.split("_")[1]
        self.user_state[call.from_user.id] = {"service_id": service_id}
        self.view.show_complexity_levels(call.message.chat.id, call.message.message_id)

    def _handle_complexity(self, call):
        self.user_state[call.from_user.id]["complexity"] = call.data.split("_")[1]
        self.view.show_urgency_options(call.message.chat.id, call.message.message_id)

    def _handle_urgency(self, call):
        user_id = call.from_user.id
        self.user_state[user_id]["urgency"] = float(call.data.split("_")[1])
        
        service = next(s for s in self.services if s.id == self.user_state[user_id]["service_id"])
        complexity = self.user_state[user_id]["complexity"]
        urgency = self.user_state[user_id]["urgency"]
        
        price = int(service.base_price * service.complexity_levels[complexity] * urgency)
        
        self.bot.send_message(
            call.message.chat.id,
            f"üíº –í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n"
            f"–£—Å–ª—É–≥–∞: {service.name}\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}\n"
            f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}x\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: {price} —Ä—É–±.\n\n"
            "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:"
        )
        
        self.bot.register_next_step_handler_by_chat_id(
            call.message.chat.id,
            lambda m: self._finalize_order(m, user_id, service, complexity, urgency)
        )

    def _finalize_order(self, message, user_id, service, complexity, urgency):
        try:
            price = int(service.base_price * service.complexity_levels[complexity] * urgency)
            
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                f"–£—Å–ª—É–≥–∞: {service.name}\n"
                f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                f"–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:\n{message.text}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!",
                reply_markup=self.view.create_main_menu()
            )
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.user_state.pop(user_id, None)
            
        except Exception as e:
            self._handle_error(message.chat.id, "finalize_order", e)
            self.view.show_main_menu(message.chat.id)

    def _handle_error(self, chat_id, handler_name, error):
        print(f"–û—à–∏–±–∫–∞ –≤ {handler_name}: {traceback.format_exc()}")
        self.bot.send_message(chat_id, "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        self.view.show_main_menu(chat_id)

    def run(self):
        print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        while True:
            try:
                self.bot.polling(none_stop=True, interval=1, timeout=30)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ polling: {traceback.format_exc()}")
                continue